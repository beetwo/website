@mixin gradient($from, $to) {
  /* fallback/image non-cover color */
  background-color: $from;

  /* Firefox 3.6+ */
  background-image: -moz-linear-gradient($from, $to);

  /* Safari 4+, Chrome 1+ */
  background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from($from), to($to));

  /* Safari 5.1+, Chrome 10+ */
  background-image: -webkit-linear-gradient($from, $to);

  /* Opera 11.10+ */
  background-image: -o-linear-gradient($from, $to);

  background-image: linear-gradient($from, $to);
}

//————————————————————————————————
// media queries 
//————————————————————————————————
@mixin mobile {
  @media only screen and (min-width: #{$mobile-breakpoint}) and (max-width: #{$tablet-breakpoint - 1px}) {
    @content;
  }
}

@mixin tablet {
  @media only screen and (min-width: #{$tablet-breakpoint}) and (max-width: #{$computer-breakpoint - 1px}) {
    @content;
  }
}

@mixin computer {
  @media only screen and (min-width: #{$computer-breakpoint}) and (max-width: #{$large-screen-breakpoint - 1px}) {
    @content;
  }
}

@mixin large-screen {
  @media only screen and (min-width: #{$large-screen-breakpoint}) and (max-width: #{$widescreen-breakpoint - 1px}) {
    @content;
  }
}

@mixin widescreen {
  @media only screen and (min-width: #{$widescreen-breakpoint}) {
    @content;
  }
}

@function schatten($size: 4, $color: #cccccc) {
  $stroke: ();
  @for $i from 0 through $size {
    $x: $i;
    $y: $i;
    $stroke: append($stroke, $x*1px $y*1px $color, comma);
  }
  @return $stroke;
}

@mixin textschatten($size: 2, $color: #FFDB69) {
  text-shadow: schatten($size, $color);
}

@mixin schlagschatten($size: 2, $color: #FFDB69) {
  box-shadow: schatten($size, $color);
}

/// poly-fluid-sizing
/// Generate linear interpolated size values through multiple break points
/// @param $property - A string CSS property name
/// @param $map - A Sass map of viewport unit and size value pairs
/// @requires function linear-interpolation
/// @requires function map-sort
/// @example
///   @include poly-fluid-sizing('font-size', (576px: 22px, 768px: 24px, 992px: 34px));
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@mixin poly-fluid-sizing($property, $map) {
  // Get the number of provided breakpoints
  $length: length(map-keys($map));
  
  // Error if the number of breakpoints is < 2
  @if ($length < 2) {
    @error "poly-fluid-sizing() $map requires at least values"
  }

  // Sort the map by viewport width (key)
  $map: map-sort($map);
  $keys: map-keys($map);

  // Minimum size
  #{$property}: map-get($map, nth($keys,1));
  
  // Interpolated size through breakpoints
  @for $i from 1 through ($length - 1) {
    @media (min-width:nth($keys,$i)) {
      $value1: map-get($map, nth($keys,$i));
      $value2: map-get($map, nth($keys,($i + 1)));
      // If values are not equal, perform linear interpolation
      @if ($value1 != $value2) {
        #{$property}: linear-interpolation((nth($keys,$i): $value1, nth($keys,($i+1)): $value2));
      } @else {
        #{$property}: $value1;
      }
    }
  }
  
  // Maxmimum size
  @media (min-width:nth($keys,$length)) {
    #{$property}: map-get($map, nth($keys,$length));
  }
}
